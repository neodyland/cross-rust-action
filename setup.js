// @bun
var{$:d}=globalThis.Bun;var m=/\n +},\n +\.libc += +\.{(?<targets>[^}]+)},\n +\.glibc += +\.{\n/m,w=/"(?<string>[_\-a-zA-Z0-9]+)"/g;async function h(){let t=(await d`zig targets`.quiet()).text().match(m)?.groups?.targets?.trim();if(!t)throw new Error("Failed to extract targets from zig targets output");let e=[];for(let o of t.matchAll(w)){let r=o.groups?.string;if(r)e.push(r)}return e}var s=await h(),n=Bun.which("zig");if(!n)throw new Error("Zig compiler not found. Please install Zig.");var{$:c}=globalThis.Bun;async function x(){return(await c`rustup target list -q --installed`.quiet()).text().trim().split(`
`)}async function $(){return(await c`rustup target list -q`.quiet()).text().trim().split(`
`)}var[u,z]=await Promise.all([$(),x()]);async function l(t){if(z.includes(t));else await c`rustup target add ${t}`.quiet()}import{parseArgs as y}from"util";import{mkdir as T,exists as b}from"fs/promises";import i from"path";var{$:f}=globalThis.Bun;async function q(){let{values:t}=y({args:Bun.argv,options:{zigtarget:{type:"string"},dir:{type:"string",default:"./target/cross-rust"},rusttarget:{type:"string"},sh:{type:"string",default:"/bin/sh"}},strict:!0,allowPositionals:!0});if(!t.zigtarget)return console.error("No zigtarget specified. Use --zigtarget to specify a zigtarget."),console.error(`Valid zigtargets are: ${s.join(", ")}`),!1;if(!s.includes(t.zigtarget))return console.error(`ZigTarget "${t.zigtarget}" is not valid.`),console.error(`Valid zigtargets are: ${s.join(", ")}`),!1;let e=`#!${t.sh}
${n} cc -target ${t.zigtarget} $@`,o=i.resolve(t.dir),r=i.join(o,"bin");if(!await b(r))await T(r,{recursive:!0});let a=i.join(r,"cross-rust-cc");if(await Bun.write(a,e),await f`chmod +x ${a}`.quiet(),!t.rusttarget)return console.error("No rusttarget specified. Use --rusttarget to specify a rusttarget."),console.error(`Valid rusttargets are: ${u.join(", ")}`),!1;await l(t.rusttarget);let p=`#!${t.sh}
export CC=${a}
${Bun.which("cargo")} --config "target.${t.rusttarget}='${a}'" build --target ${t.rusttarget} $@`,g=i.join(r,"cross-cargo-build");return await Bun.write(g,p),await f`chmod +x ${g}`.quiet(),console.log(g),!0}var E=await q();process.exit(E?0:1);
